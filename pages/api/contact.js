// pages/api/contact.js
import { validateRecaptcha } from '../../lib/recaptcha';

/**
 * Escapes HTML special characters in a string to prevent issues with Telegram's HTML parse mode.
 * @param {string} text The text to escape.
 * @returns {string} The escaped text.
 */
function escapeHtml(text) {
  if (!text) return '';
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}

/**
 * Formats a contact string (phone or email) into a clickable HTML link for Telegram.
 * @param {string} contact The contact string (phone number or email address).
 * @returns {string} An HTML anchor tag.
 */
function formatContactLink(contact) {
  const isEmail = contact.includes('@');
  const escapedContact = escapeHtml(contact);

  if (isEmail) {
    return `<a href="mailto:${escapedContact}">${escapedContact}</a>`;
  } else {
    // Create a tel: link by removing non-numeric characters for the href attribute.
    const phoneLink = contact.replace(/[^+\d]/g, '');
    return `<a href="tel:${phoneLink}">${escapedContact}</a>`;
  }
}

export default async function handler(req, res) {
    if (req.method !== 'POST') {
        return res.status(405).json({ message: '–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω' });
    }

    const { name, contact, message, recaptchaToken, tour } = req.body;

    if (!name || !contact) {
        return res.status(400).json({ message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è.' });
    }

    const recaptchaResult = await validateRecaptcha(recaptchaToken);
    if (!recaptchaResult.success) {
        return res.status(400).json({ message: recaptchaResult.message });
    }

    // Escape user-provided data to ensure it's safely rendered in HTML
    const nameEscaped = escapeHtml(name);
    const messageEscaped = escapeHtml(message);
    const contactLink = formatContactLink(contact);

    let tourInfo = '';
    if (tour && tour.title) {
        const titleEscaped = escapeHtml(tour.title);
        const priceEscaped = escapeHtml(String(tour.price));
        const currencyEscaped = escapeHtml(tour.currency);
        // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —ç–º–æ–¥–∑–∏ –≤ –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—É—Ä–µ
        tourInfo = `\n\n<b>---</b>\n` +
                   `üé´ <b>–ó–∞–ø—Ä–æ—Å –ø–æ —Ç—É—Ä—É:</b> ${titleEscaped}\n` +
                   `üí∞ <b>–¶–µ–Ω–∞:</b> ${priceEscaped} ${currencyEscaped}`;
    }

    // Construct the message using HTML for rich formatting
    // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —ç–º–æ–¥–∑–∏
    const telegramMessage = `<b>üå¥ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ HappyTour.by! ‚úàÔ∏è</b>\n\n` +
                            `üë§ <b>–ò–º—è:</b> ${nameEscaped}\n` +
                            `üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> ${contactLink}\n` +
                            `üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${messageEscaped || '–ù–µ—Ç'}` +
                            `${tourInfo}`;

    const TELEGRAM_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
    const TELEGRAM_TOPIC_ID = process.env.TELEGRAM_TOPIC_ID;

    if (!TELEGRAM_TOKEN || !TELEGRAM_CHAT_ID) {
        console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Telegram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.");
        return res.status(500).json({ message: '–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.' });
    }

    const telegramApiUrl = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`;

    try {
        const telegramPayload = {
            chat_id: TELEGRAM_CHAT_ID,
            text: telegramMessage,
            parse_mode: 'HTML', // Use HTML parse mode for clickable links
            ...(TELEGRAM_TOPIC_ID && { message_thread_id: TELEGRAM_TOPIC_ID }),
        };

        const telegramResponse = await fetch(telegramApiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(telegramPayload),
        });

        if (!telegramResponse.ok) {
            const telegramResult = await telegramResponse.json();
            console.error("Telegram API Error:", telegramResult);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram.');
        }

        return res.status(200).json({ message: '–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.' });
    } catch (error) {
        console.error("Telegram Error:", error.message);
        return res.status(500).json({ message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã.' });
    }
}
